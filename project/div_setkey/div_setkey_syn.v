// megafunction wizard: %LPM_DIVIDE%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: LPM_DIVIDE 

// ============================================================
// File Name: div_setkey.v
// Megafunction Name(s):
// 			LPM_DIVIDE
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 16.0.2 Build 222 07/20/2016 SJ Lite Edition
// ************************************************************


//Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, the Altera Quartus Prime License Agreement,
//the Altera MegaCore Function License Agreement, or other 
//applicable license agreement, including, without limitation, 
//that your use is for the sole purpose of programming logic 
//devices manufactured by Altera and sold by Altera or its 
//authorized distributors.  Please refer to the applicable 
//agreement for further details.


//lpm_divide DEVICE_FAMILY="Cyclone V" LPM_DREPRESENTATION="UNSIGNED" LPM_NREPRESENTATION="UNSIGNED" LPM_PIPELINE=1 LPM_REMAINDERPOSITIVE="TRUE" LPM_WIDTHD=10 LPM_WIDTHN=10 MAXIMIZE_SPEED=6 clock denom numer quotient remain
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:07:20:19:14:36:SJ cbx_lpm_abs 2016:07:20:19:14:36:SJ cbx_lpm_add_sub 2016:07:20:19:14:36:SJ cbx_lpm_divide 2016:07:20:19:14:36:SJ cbx_mgl 2016:07:20:20:47:47:SJ cbx_nadder 2016:07:20:19:14:36:SJ cbx_stratix 2016:07:20:19:14:36:SJ cbx_stratixii 2016:07:20:19:14:36:SJ cbx_util_mgl 2016:07:20:19:14:36:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//sign_div_unsign DEN_REPRESENTATION="UNSIGNED" DEN_WIDTH=10 LPM_PIPELINE=1 MAXIMIZE_SPEED=6 NUM_REPRESENTATION="UNSIGNED" NUM_WIDTH=10 SKIP_BITS=0 clock denominator numerator quotient remainder
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:07:20:19:14:36:SJ cbx_lpm_abs 2016:07:20:19:14:36:SJ cbx_lpm_add_sub 2016:07:20:19:14:36:SJ cbx_lpm_divide 2016:07:20:19:14:36:SJ cbx_mgl 2016:07:20:20:47:47:SJ cbx_nadder 2016:07:20:19:14:36:SJ cbx_stratix 2016:07:20:19:14:36:SJ cbx_stratixii 2016:07:20:19:14:36:SJ cbx_util_mgl 2016:07:20:19:14:36:SJ  VERSION_END


//alt_u_div DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=1 MAXIMIZE_SPEED=6 SKIP_BITS=0 WIDTH_D=10 WIDTH_N=10 WIDTH_Q=10 WIDTH_R=10 clock denominator numerator quotient remainder
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:07:20:19:14:36:SJ cbx_lpm_abs 2016:07:20:19:14:36:SJ cbx_lpm_add_sub 2016:07:20:19:14:36:SJ cbx_lpm_divide 2016:07:20:19:14:36:SJ cbx_mgl 2016:07:20:20:47:47:SJ cbx_nadder 2016:07:20:19:14:36:SJ cbx_stratix 2016:07:20:19:14:36:SJ cbx_stratixii 2016:07:20:19:14:36:SJ cbx_util_mgl 2016:07:20:19:14:36:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=1 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:07:20:19:14:36:SJ cbx_lpm_add_sub 2016:07:20:19:14:36:SJ cbx_mgl 2016:07:20:20:47:47:SJ cbx_nadder 2016:07:20:19:14:36:SJ cbx_stratix 2016:07:20:19:14:36:SJ cbx_stratixii 2016:07:20:19:14:36:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=2 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:07:20:19:14:36:SJ cbx_lpm_add_sub 2016:07:20:19:14:36:SJ cbx_mgl 2016:07:20:20:47:47:SJ cbx_nadder 2016:07:20:19:14:36:SJ cbx_stratix 2016:07:20:19:14:36:SJ cbx_stratixii 2016:07:20:19:14:36:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=3 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:07:20:19:14:36:SJ cbx_lpm_add_sub 2016:07:20:19:14:36:SJ cbx_mgl 2016:07:20:20:47:47:SJ cbx_nadder 2016:07:20:19:14:36:SJ cbx_stratix 2016:07:20:19:14:36:SJ cbx_stratixii 2016:07:20:19:14:36:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=4 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:07:20:19:14:36:SJ cbx_lpm_add_sub 2016:07:20:19:14:36:SJ cbx_mgl 2016:07:20:20:47:47:SJ cbx_nadder 2016:07:20:19:14:36:SJ cbx_stratix 2016:07:20:19:14:36:SJ cbx_stratixii 2016:07:20:19:14:36:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=5 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:07:20:19:14:36:SJ cbx_lpm_add_sub 2016:07:20:19:14:36:SJ cbx_mgl 2016:07:20:20:47:47:SJ cbx_nadder 2016:07:20:19:14:36:SJ cbx_stratix 2016:07:20:19:14:36:SJ cbx_stratixii 2016:07:20:19:14:36:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=6 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:07:20:19:14:36:SJ cbx_lpm_add_sub 2016:07:20:19:14:36:SJ cbx_mgl 2016:07:20:20:47:47:SJ cbx_nadder 2016:07:20:19:14:36:SJ cbx_stratix 2016:07:20:19:14:36:SJ cbx_stratixii 2016:07:20:19:14:36:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=7 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:07:20:19:14:36:SJ cbx_lpm_add_sub 2016:07:20:19:14:36:SJ cbx_mgl 2016:07:20:20:47:47:SJ cbx_nadder 2016:07:20:19:14:36:SJ cbx_stratix 2016:07:20:19:14:36:SJ cbx_stratixii 2016:07:20:19:14:36:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=8 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:07:20:19:14:36:SJ cbx_lpm_add_sub 2016:07:20:19:14:36:SJ cbx_mgl 2016:07:20:20:47:47:SJ cbx_nadder 2016:07:20:19:14:36:SJ cbx_stratix 2016:07:20:19:14:36:SJ cbx_stratixii 2016:07:20:19:14:36:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:07:20:19:14:36:SJ cbx_lpm_add_sub 2016:07:20:19:14:36:SJ cbx_mgl 2016:07:20:20:47:47:SJ cbx_nadder 2016:07:20:19:14:36:SJ cbx_stratix 2016:07:20:19:14:36:SJ cbx_stratixii 2016:07:20:19:14:36:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=10 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:07:20:19:14:36:SJ cbx_lpm_add_sub 2016:07:20:19:14:36:SJ cbx_mgl 2016:07:20:20:47:47:SJ cbx_nadder 2016:07:20:19:14:36:SJ cbx_stratix 2016:07:20:19:14:36:SJ cbx_stratixii 2016:07:20:19:14:36:SJ  VERSION_END

//synthesis_resources = lut 65 reg 40 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"{-to DFFQuotient[0]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[1]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[2]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[3]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[4]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[5]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[6]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[7]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[8]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[9]} POWER_UP_LEVEL=LOW"} *)
module  div_setkey_alt_u_div
	( 
	clock,
	denominator,
	numerator,
	quotient,
	remainder) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [9:0]  denominator;
	input   [9:0]  numerator;
	output   [9:0]  quotient;
	output   [9:0]  remainder;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=HIGH"} *)
	reg	[9:0]	DFFDenominator;
	reg	[9:0]	DFFNumerator;
	wire	[9:0]	wire_DFFQuotient_d;
	reg	[9:0]	DFFQuotient;
	reg	[9:0]	DFFStage;
	wire	[1:0]	wire_add_sub_0_result_int;
	wire	wire_add_sub_0_cout;
	wire	[0:0]	wire_add_sub_0_dataa;
	wire	[0:0]	wire_add_sub_0_datab;
	wire	[0:0]	wire_add_sub_0_result;
	wire	[2:0]	wire_add_sub_1_result_int;
	wire	wire_add_sub_1_cout;
	wire	[1:0]	wire_add_sub_1_dataa;
	wire	[1:0]	wire_add_sub_1_datab;
	wire	[1:0]	wire_add_sub_1_result;
	wire	[3:0]	wire_add_sub_2_result_int;
	wire	wire_add_sub_2_cout;
	wire	[2:0]	wire_add_sub_2_dataa;
	wire	[2:0]	wire_add_sub_2_datab;
	wire	[2:0]	wire_add_sub_2_result;
	wire	[4:0]	wire_add_sub_3_result_int;
	wire	wire_add_sub_3_cout;
	wire	[3:0]	wire_add_sub_3_dataa;
	wire	[3:0]	wire_add_sub_3_datab;
	wire	[3:0]	wire_add_sub_3_result;
	wire	[5:0]	wire_add_sub_4_result_int;
	wire	wire_add_sub_4_cout;
	wire	[4:0]	wire_add_sub_4_dataa;
	wire	[4:0]	wire_add_sub_4_datab;
	wire	[4:0]	wire_add_sub_4_result;
	wire	[6:0]	wire_add_sub_5_result_int;
	wire	wire_add_sub_5_cout;
	wire	[5:0]	wire_add_sub_5_dataa;
	wire	[5:0]	wire_add_sub_5_datab;
	wire	[5:0]	wire_add_sub_5_result;
	wire	[7:0]	wire_add_sub_6_result_int;
	wire	wire_add_sub_6_cout;
	wire	[6:0]	wire_add_sub_6_dataa;
	wire	[6:0]	wire_add_sub_6_datab;
	wire	[6:0]	wire_add_sub_6_result;
	wire	[8:0]	wire_add_sub_7_result_int;
	wire	wire_add_sub_7_cout;
	wire	[7:0]	wire_add_sub_7_dataa;
	wire	[7:0]	wire_add_sub_7_datab;
	wire	[7:0]	wire_add_sub_7_result;
	wire	[9:0]	wire_add_sub_8_result_int;
	wire	wire_add_sub_8_cout;
	wire	[8:0]	wire_add_sub_8_dataa;
	wire	[8:0]	wire_add_sub_8_datab;
	wire	[8:0]	wire_add_sub_8_result;
	wire	[10:0]	wire_add_sub_9_result_int;
	wire	wire_add_sub_9_cout;
	wire	[9:0]	wire_add_sub_9_dataa;
	wire	[9:0]	wire_add_sub_9_datab;
	wire	[9:0]	wire_add_sub_9_result;
	wire aclr;
	wire clk_en;
	wire  [120:0]  DenominatorIn;
	wire  [120:0]  DenominatorIn_tmp;
	wire  gnd_wire;
	wire  [109:0]  nose;
	wire  [109:0]  NumeratorIn;
	wire  [109:0]  NumeratorIn_tmp;
	wire  [99:0]  prestg;
	wire  [9:0]  quotient_tmp;
	wire  [109:0]  sel;
	wire  [109:0]  selnose;
	wire  [109:0]  StageIn;
	wire  [109:0]  StageIn_tmp;
	wire  [99:0]  StageOut;
	wire  vcc_wire;

	// synopsys translate_off
	initial
		DFFDenominator = {10{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator <= {10{1'b1}};
		else if  (clk_en == 1'b1)   DFFDenominator <= {denominator};
	// synopsys translate_off
	initial
		DFFNumerator = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFNumerator <= 10'b0;
		else if  (clk_en == 1'b1)   DFFNumerator <= {numerator};
	// synopsys translate_off
	initial
		DFFQuotient[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[0:0] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[0:0] <= wire_DFFQuotient_d[0:0];
	// synopsys translate_off
	initial
		DFFQuotient[1:1] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[1:1] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[1:1] <= wire_DFFQuotient_d[1:1];
	// synopsys translate_off
	initial
		DFFQuotient[2:2] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[2:2] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[2:2] <= wire_DFFQuotient_d[2:2];
	// synopsys translate_off
	initial
		DFFQuotient[3:3] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[3:3] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[3:3] <= wire_DFFQuotient_d[3:3];
	// synopsys translate_off
	initial
		DFFQuotient[4:4] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[4:4] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[4:4] <= wire_DFFQuotient_d[4:4];
	// synopsys translate_off
	initial
		DFFQuotient[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[5:5] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[5:5] <= wire_DFFQuotient_d[5:5];
	// synopsys translate_off
	initial
		DFFQuotient[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[6:6] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[6:6] <= wire_DFFQuotient_d[6:6];
	// synopsys translate_off
	initial
		DFFQuotient[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[7:7] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[7:7] <= wire_DFFQuotient_d[7:7];
	// synopsys translate_off
	initial
		DFFQuotient[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[8:8] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[8:8] <= wire_DFFQuotient_d[8:8];
	// synopsys translate_off
	initial
		DFFQuotient[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[9:9] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[9:9] <= wire_DFFQuotient_d[9:9];
	assign
		wire_DFFQuotient_d = {(~ selnose[0]), (~ selnose[11]), (~ selnose[22]), (~ selnose[33]), (~ selnose[44]), {5{vcc_wire}}};
	// synopsys translate_off
	initial
		DFFStage = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFStage <= 10'b0;
		else if  (clk_en == 1'b1)   DFFStage <= {StageOut[49:40]};
	assign
		wire_add_sub_0_result_int = wire_add_sub_0_dataa - wire_add_sub_0_datab;
	assign
		wire_add_sub_0_result = wire_add_sub_0_result_int[0:0],
		wire_add_sub_0_cout = ~wire_add_sub_0_result_int[1:1];
	assign
		wire_add_sub_0_dataa = NumeratorIn[9],
		wire_add_sub_0_datab = DenominatorIn[0];
	assign
		wire_add_sub_1_result_int = wire_add_sub_1_dataa - wire_add_sub_1_datab;
	assign
		wire_add_sub_1_result = wire_add_sub_1_result_int[1:0],
		wire_add_sub_1_cout = ~wire_add_sub_1_result_int[2:2];
	assign
		wire_add_sub_1_dataa = {StageIn[10], NumeratorIn[18]},
		wire_add_sub_1_datab = DenominatorIn[12:11];
	assign
		wire_add_sub_2_result_int = wire_add_sub_2_dataa - wire_add_sub_2_datab;
	assign
		wire_add_sub_2_result = wire_add_sub_2_result_int[2:0],
		wire_add_sub_2_cout = ~wire_add_sub_2_result_int[3:3];
	assign
		wire_add_sub_2_dataa = {StageIn[21:20], NumeratorIn[27]},
		wire_add_sub_2_datab = DenominatorIn[24:22];
	assign
		wire_add_sub_3_result_int = wire_add_sub_3_dataa - wire_add_sub_3_datab;
	assign
		wire_add_sub_3_result = wire_add_sub_3_result_int[3:0],
		wire_add_sub_3_cout = ~wire_add_sub_3_result_int[4:4];
	assign
		wire_add_sub_3_dataa = {StageIn[32:30], NumeratorIn[36]},
		wire_add_sub_3_datab = DenominatorIn[36:33];
	assign
		wire_add_sub_4_result_int = wire_add_sub_4_dataa - wire_add_sub_4_datab;
	assign
		wire_add_sub_4_result = wire_add_sub_4_result_int[4:0],
		wire_add_sub_4_cout = ~wire_add_sub_4_result_int[5:5];
	assign
		wire_add_sub_4_dataa = {StageIn[43:40], NumeratorIn[45]},
		wire_add_sub_4_datab = DenominatorIn[48:44];
	assign
		wire_add_sub_5_result_int = wire_add_sub_5_dataa - wire_add_sub_5_datab;
	assign
		wire_add_sub_5_result = wire_add_sub_5_result_int[5:0],
		wire_add_sub_5_cout = ~wire_add_sub_5_result_int[6:6];
	assign
		wire_add_sub_5_dataa = {StageIn[54:50], NumeratorIn[54]},
		wire_add_sub_5_datab = DenominatorIn[60:55];
	assign
		wire_add_sub_6_result_int = wire_add_sub_6_dataa - wire_add_sub_6_datab;
	assign
		wire_add_sub_6_result = wire_add_sub_6_result_int[6:0],
		wire_add_sub_6_cout = ~wire_add_sub_6_result_int[7:7];
	assign
		wire_add_sub_6_dataa = {StageIn[65:60], NumeratorIn[63]},
		wire_add_sub_6_datab = DenominatorIn[72:66];
	assign
		wire_add_sub_7_result_int = wire_add_sub_7_dataa - wire_add_sub_7_datab;
	assign
		wire_add_sub_7_result = wire_add_sub_7_result_int[7:0],
		wire_add_sub_7_cout = ~wire_add_sub_7_result_int[8:8];
	assign
		wire_add_sub_7_dataa = {StageIn[76:70], NumeratorIn[72]},
		wire_add_sub_7_datab = DenominatorIn[84:77];
	assign
		wire_add_sub_8_result_int = wire_add_sub_8_dataa - wire_add_sub_8_datab;
	assign
		wire_add_sub_8_result = wire_add_sub_8_result_int[8:0],
		wire_add_sub_8_cout = ~wire_add_sub_8_result_int[9:9];
	assign
		wire_add_sub_8_dataa = {StageIn[87:80], NumeratorIn[81]},
		wire_add_sub_8_datab = DenominatorIn[96:88];
	assign
		wire_add_sub_9_result_int = wire_add_sub_9_dataa - wire_add_sub_9_datab;
	assign
		wire_add_sub_9_result = wire_add_sub_9_result_int[9:0],
		wire_add_sub_9_cout = ~wire_add_sub_9_result_int[10:10];
	assign
		wire_add_sub_9_dataa = {StageIn[98:90], NumeratorIn[90]},
		wire_add_sub_9_datab = DenominatorIn[108:99];
	assign
		aclr = 1'b0,
		clk_en = 1'b1,
		DenominatorIn = DenominatorIn_tmp,
		DenominatorIn_tmp = {DenominatorIn[109:55], {gnd_wire, DFFDenominator[9:0]}, DenominatorIn[43:0], {gnd_wire, denominator}},
		gnd_wire = 1'b0,
		nose = {{10{1'b0}}, wire_add_sub_9_cout, {10{1'b0}}, wire_add_sub_8_cout, {10{1'b0}}, wire_add_sub_7_cout, {10{1'b0}}, wire_add_sub_6_cout, {10{1'b0}}, wire_add_sub_5_cout, {10{1'b0}}, wire_add_sub_4_cout, {10{1'b0}}, wire_add_sub_3_cout, {10{1'b0}}, wire_add_sub_2_cout, {10{1'b0}}, wire_add_sub_1_cout, {10{1'b0}}, wire_add_sub_0_cout},
		NumeratorIn = NumeratorIn_tmp,
		NumeratorIn_tmp = {NumeratorIn[99:50], DFFNumerator[9:0], NumeratorIn[39:0], numerator},
		prestg = {wire_add_sub_9_result, {1{1'b0}}, wire_add_sub_8_result, {2{1'b0}}, wire_add_sub_7_result, {3{1'b0}}, wire_add_sub_6_result, {4{1'b0}}, wire_add_sub_5_result, {5{1'b0}}, wire_add_sub_4_result, {6{1'b0}}, wire_add_sub_3_result, {7{1'b0}}, wire_add_sub_2_result, {8{1'b0}}, wire_add_sub_1_result, {9{1'b0}}, wire_add_sub_0_result},
		quotient = quotient_tmp,
		quotient_tmp = {DFFQuotient[9:5], (~ selnose[55]), (~ selnose[66]), (~ selnose[77]), (~ selnose[88]), (~ selnose[99])},
		remainder = StageIn[109:100],
		sel = {gnd_wire, (sel[109] | DenominatorIn[119]), (sel[108] | DenominatorIn[118]), (sel[107] | DenominatorIn[117]), (sel[106] | DenominatorIn[116]), (sel[105] | DenominatorIn[115]), (sel[104] | DenominatorIn[114]), (sel[103] | DenominatorIn[113]), (sel[102] | DenominatorIn[112]), (sel[101] | DenominatorIn[111]), gnd_wire, (sel[99] | DenominatorIn[108]), (sel[98] | DenominatorIn[107]), (sel[97] | DenominatorIn[106]), (sel[96] | DenominatorIn[105]), (sel[95] | DenominatorIn[104]), (sel[94] | DenominatorIn[103]), (sel[93] | DenominatorIn[102]), (sel[92] | DenominatorIn[101]), (sel[91] | DenominatorIn[100]), gnd_wire, (sel[89] | DenominatorIn[97]), (sel[88] | DenominatorIn[96]), (sel[87] | DenominatorIn[95]), (sel[86] | DenominatorIn[94]), (sel[85] | DenominatorIn[93]), (sel[84] | DenominatorIn[92]), (sel[83] | DenominatorIn[91]), (sel[82] | DenominatorIn[90]), (sel[81] | DenominatorIn[89]), gnd_wire, (sel[79] | DenominatorIn[86]), (sel[78] | DenominatorIn[85]), (sel[77] | DenominatorIn[84]), (sel[76] | DenominatorIn[83]), (sel[75] | DenominatorIn[82]), (sel[74] | DenominatorIn[81]), (sel[73] | DenominatorIn[80]), (sel[72] | DenominatorIn[79]), (sel[71] | DenominatorIn[78]), gnd_wire, (sel[69] | DenominatorIn[75]), (sel[68] | DenominatorIn[74]), (sel[67] | DenominatorIn[73]), (sel[66] | DenominatorIn[72]), (sel[65] | DenominatorIn[71]), (sel[64] | DenominatorIn[70]), (sel[63] | DenominatorIn[69]), (sel[62] | DenominatorIn[68]), (sel[61] | DenominatorIn[67]), gnd_wire, (sel[59] | DenominatorIn[64]), (sel[58] | DenominatorIn[63]), (sel[57] | DenominatorIn[62]), (sel[56] | DenominatorIn[61]), (sel[55] | DenominatorIn[60]), (sel[54] | DenominatorIn[59]), (sel[53] | DenominatorIn[58]), (sel[52] | DenominatorIn[57]), (sel[51] | DenominatorIn[56]), gnd_wire, (sel[49] | DenominatorIn[53]), (sel[48] | DenominatorIn[52]), (sel[47] | DenominatorIn[51]), (sel[46] | DenominatorIn[50]), (sel[45] | DenominatorIn[49]), (sel[44] | DenominatorIn[48]), (sel[43] | DenominatorIn[47]), (sel[42] | DenominatorIn[46]), (sel[41] | DenominatorIn[45]
), gnd_wire, (sel[39] | DenominatorIn[42]), (sel[38] | DenominatorIn[41]), (sel[37] | DenominatorIn[40]), (sel[36] | DenominatorIn[39]), (sel[35] | DenominatorIn[38]), (sel[34] | DenominatorIn[37]), (sel[33] | DenominatorIn[36]), (sel[32] | DenominatorIn[35]), (sel[31] | DenominatorIn[34]), gnd_wire, (sel[29] | DenominatorIn[31]), (sel[28] | DenominatorIn[30]), (sel[27] | DenominatorIn[29]), (sel[26] | DenominatorIn[28]), (sel[25] | DenominatorIn[27]), (sel[24] | DenominatorIn[26]), (sel[23] | DenominatorIn[25]), (sel[22] | DenominatorIn[24]), (sel[21] | DenominatorIn[23]), gnd_wire, (sel[19] | DenominatorIn[20]), (sel[18] | DenominatorIn[19]), (sel[17] | DenominatorIn[18]), (sel[16] | DenominatorIn[17]), (sel[15] | DenominatorIn[16]), (sel[14] | DenominatorIn[15]), (sel[13] | DenominatorIn[14]), (sel[12] | DenominatorIn[13]), (sel[11] | DenominatorIn[12]), gnd_wire, (sel[9] | DenominatorIn[9]), (sel[8] | DenominatorIn[8]), (sel[7] | DenominatorIn[7]), (sel[6] | DenominatorIn[6]), (sel[5] | DenominatorIn[5]), (sel[4] | DenominatorIn[4]), (sel[3] | DenominatorIn[3]), (sel[2] | DenominatorIn[2]), (sel[1] | DenominatorIn[1])},
		selnose = {((~ nose[109]) | sel[109]), ((~ nose[108]) | sel[108]), ((~ nose[107]) | sel[107]), ((~ nose[106]) | sel[106]), ((~ nose[105]) | sel[105]), ((~ nose[104]) | sel[104]), ((~ nose[103]) | sel[103]), ((~ nose[102]) | sel[102]), ((~ nose[101]) | sel[101]), ((~ nose[100]) | sel[100]), ((~ nose[99]) | sel[99]), ((~ nose[98]) | sel[98]), ((~ nose[97]) | sel[97]), ((~ nose[96]) | sel[96]), ((~ nose[95]) | sel[95]), ((~ nose[94]) | sel[94]), ((~ nose[93]) | sel[93]), ((~ nose[92]) | sel[92]), ((~ nose[91]) | sel[91]), ((~ nose[90]) | sel[90]), ((~ nose[89]) | sel[89]), ((~ nose[88]) | sel[88]), ((~ nose[87]) | sel[87]), ((~ nose[86]) | sel[86]), ((~ nose[85]) | sel[85]), ((~ nose[84]) | sel[84]), ((~ nose[83]) | sel[83]), ((~ nose[82]) | sel[82]), ((~ nose[81]) | sel[81]), ((~ nose[80]) | sel[80]), ((~ nose[79]) | sel[79]), ((~ nose[78]) | sel[78]), ((~ nose[77]) | sel[77]), ((~ nose[76]) | sel[76]), ((~ nose[75]) | sel[75]), ((~ nose[74]) | sel[74]), ((~ nose[73]) | sel[73]), ((~ nose[72]) | sel[72]), ((~ nose[71]) | sel[71]), ((~ nose[70]) | sel[70]), ((~ nose[69]) | sel[69]), ((~ nose[68]) | sel[68]), ((~ nose[67]) | sel[67]), ((~ nose[66]) | sel[66]), ((~ nose[65]) | sel[65]), ((~ nose[64]) | sel[64]), ((~ nose[63]) | sel[63]), ((~ nose[62]) | sel[62]), ((~ nose[61]) | sel[61]), ((~ nose[60]) | sel[60]), ((~ nose[59]) | sel[59]), ((~ nose[58]) | sel[58]), ((~ nose[57]) | sel[57]), ((~ nose[56]) | sel[56]), ((~ nose[55]) | sel[55]), ((~ nose[54]) | sel[54]), ((~ nose[53]) | sel[53]), ((~ nose[52]) | sel[52]), ((~ nose[51]) | sel[51]), ((~ nose[50]) | sel[50]), ((~ nose[49]) | sel[49]), ((~ nose[48]) | sel[48]), ((~ nose[47]) | sel[47]), ((~ nose[46]) | sel[46]), ((~ nose[45]) | sel[45]), ((~ nose[44]) | sel[44]), ((~ nose[43]) | sel[43]), ((~ nose[42]) | sel[42]), ((~ nose[41]) | sel[41]), ((~ nose[40]) | sel[40]), ((~ nose[39]) | sel[39]), ((~ nose[38]) | sel[38]), ((~ nose[37]) | sel[37]), ((~ nose[36]) | sel[36]), ((~ nose[35]) | sel[35]), ((~ nose[34]) | sel[34]), ((~ nose[33]) | sel[33]), ((~ nose[32])
 | sel[32]), ((~ nose[31]) | sel[31]), ((~ nose[30]) | sel[30]), ((~ nose[29]) | sel[29]), ((~ nose[28]) | sel[28]), ((~ nose[27]) | sel[27]), ((~ nose[26]) | sel[26]), ((~ nose[25]) | sel[25]), ((~ nose[24]) | sel[24]), ((~ nose[23]) | sel[23]), ((~ nose[22]) | sel[22]), ((~ nose[21]) | sel[21]), ((~ nose[20]) | sel[20]), ((~ nose[19]) | sel[19]), ((~ nose[18]) | sel[18]), ((~ nose[17]) | sel[17]), ((~ nose[16]) | sel[16]), ((~ nose[15]) | sel[15]), ((~ nose[14]) | sel[14]), ((~ nose[13]) | sel[13]), ((~ nose[12]) | sel[12]), ((~ nose[11]) | sel[11]), ((~ nose[10]) | sel[10]), ((~ nose[9]) | sel[9]), ((~ nose[8]) | sel[8]), ((~ nose[7]) | sel[7]), ((~ nose[6]) | sel[6]), ((~ nose[5]) | sel[5]), ((~ nose[4]) | sel[4]), ((~ nose[3]) | sel[3]), ((~ nose[2]) | sel[2]), ((~ nose[1]) | sel[1]), ((~ nose[0]) | sel[0])},
		StageIn = StageIn_tmp,
		StageIn_tmp = {StageOut[99:50], DFFStage[9:0], StageOut[39:0], {10{1'b0}}},
		StageOut = {(({StageIn[98:90], NumeratorIn[90]} & {10{selnose[99]}}) | (prestg[99:90] & {10{(~ selnose[99])}})), (({StageIn[88:80], NumeratorIn[81]} & {10{selnose[88]}}) | (prestg[89:80] & {10{(~ selnose[88])}})), (({StageIn[78:70], NumeratorIn[72]} & {10{selnose[77]}}) | (prestg[79:70] & {10{(~ selnose[77])}})), (({StageIn[68:60], NumeratorIn[63]} & {10{selnose[66]}}) | (prestg[69:60] & {10{(~ selnose[66])}})), (({StageIn[58:50], NumeratorIn[54]} & {10{selnose[55]}}) | (prestg[59:50] & {10{(~ selnose[55])}})), (({StageIn[48:40], NumeratorIn[45]} & {10{selnose[44]}}) | (prestg[49:40] & {10{(~ selnose[44])}})), (({StageIn[38:30], NumeratorIn[36]} & {10{selnose[33]}}) | (prestg[39:30] & {10{(~ selnose[33])}})), (({StageIn[28:20], NumeratorIn[27]} & {10{selnose[22]}}) | (prestg[29:20] & {10{(~ selnose[22])}})), (({StageIn[18:10], NumeratorIn[18]} & {10{selnose[11]}}) | (prestg[19:10] & {10{(~ selnose[11])}})), (({StageIn[8:0], NumeratorIn[9]} & {10{selnose[0]}}) | (prestg[9:0] & {10{(~ selnose[0])}}))},
		vcc_wire = 1'b1;
endmodule //div_setkey_alt_u_div

//synthesis_resources = lut 65 reg 40 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  div_setkey_sign_div_unsign
	( 
	clock,
	denominator,
	numerator,
	quotient,
	remainder) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [9:0]  denominator;
	input   [9:0]  numerator;
	output   [9:0]  quotient;
	output   [9:0]  remainder;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [9:0]   wire_divider_quotient;
	wire  [9:0]   wire_divider_remainder;
	wire  [9:0]  norm_num;
	wire  [9:0]  protect_quotient;
	wire  [9:0]  protect_remainder;

	div_setkey_alt_u_div   divider
	( 
	.clock(clock),
	.denominator(denominator),
	.numerator(norm_num),
	.quotient(wire_divider_quotient),
	.remainder(wire_divider_remainder));
	assign
		norm_num = numerator,
		protect_quotient = wire_divider_quotient,
		protect_remainder = wire_divider_remainder,
		quotient = protect_quotient,
		remainder = protect_remainder;
endmodule //div_setkey_sign_div_unsign

//synthesis_resources = lut 65 reg 40 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  div_setkey_lpm_divide
	( 
	clock,
	denom,
	numer,
	quotient,
	remain) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [9:0]  denom;
	input   [9:0]  numer;
	output   [9:0]  quotient;
	output   [9:0]  remain;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [9:0]   wire_divider_quotient;
	wire  [9:0]   wire_divider_remainder;
	wire  [9:0]  numer_tmp;

	div_setkey_sign_div_unsign   divider
	( 
	.clock(clock),
	.denominator(denom),
	.numerator(numer_tmp),
	.quotient(wire_divider_quotient),
	.remainder(wire_divider_remainder));
	assign
		numer_tmp = numer,
		quotient = wire_divider_quotient,
		remain = wire_divider_remainder;
endmodule //div_setkey_lpm_divide
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module div_setkey (
	clock,
	denom,
	numer,
	quotient,
	remain)/* synthesis synthesis_clearbox = 1 */;

	input	  clock;
	input	[9:0]  denom;
	input	[9:0]  numer;
	output	[9:0]  quotient;
	output	[9:0]  remain;

	wire [9:0] sub_wire0;
	wire [9:0] sub_wire1;
	wire [9:0] quotient = sub_wire0[9:0];
	wire [9:0] remain = sub_wire1[9:0];

	div_setkey_lpm_divide	div_setkey_lpm_divide_component (
				.clock (clock),
				.denom (denom),
				.numer (numer),
				.quotient (sub_wire0),
				.remain (sub_wire1));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: PRIVATE: PRIVATE_LPM_REMAINDERPOSITIVE STRING "TRUE"
// Retrieval info: PRIVATE: PRIVATE_MAXIMIZE_SPEED NUMERIC "6"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: USING_PIPELINE NUMERIC "1"
// Retrieval info: PRIVATE: VERSION_NUMBER NUMERIC "2"
// Retrieval info: PRIVATE: new_diagram STRING "1"
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: CONSTANT: LPM_DREPRESENTATION STRING "UNSIGNED"
// Retrieval info: CONSTANT: LPM_HINT STRING "MAXIMIZE_SPEED=6,LPM_REMAINDERPOSITIVE=TRUE"
// Retrieval info: CONSTANT: LPM_NREPRESENTATION STRING "UNSIGNED"
// Retrieval info: CONSTANT: LPM_PIPELINE NUMERIC "1"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_DIVIDE"
// Retrieval info: CONSTANT: LPM_WIDTHD NUMERIC "10"
// Retrieval info: CONSTANT: LPM_WIDTHN NUMERIC "10"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: denom 0 0 10 0 INPUT NODEFVAL "denom[9..0]"
// Retrieval info: USED_PORT: numer 0 0 10 0 INPUT NODEFVAL "numer[9..0]"
// Retrieval info: USED_PORT: quotient 0 0 10 0 OUTPUT NODEFVAL "quotient[9..0]"
// Retrieval info: USED_PORT: remain 0 0 10 0 OUTPUT NODEFVAL "remain[9..0]"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @denom 0 0 10 0 denom 0 0 10 0
// Retrieval info: CONNECT: @numer 0 0 10 0 numer 0 0 10 0
// Retrieval info: CONNECT: quotient 0 0 10 0 @quotient 0 0 10 0
// Retrieval info: CONNECT: remain 0 0 10 0 @remain 0 0 10 0
// Retrieval info: GEN_FILE: TYPE_NORMAL div_setkey.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL div_setkey.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL div_setkey.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL div_setkey.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL div_setkey_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL div_setkey_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL div_setkey_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
